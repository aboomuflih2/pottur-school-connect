import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Use anon key like the frontend does
const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_PUBLISHABLE_KEY
);

console.log('üß™ Testing Complete Workflow for News, Events, and Gallery...');
console.log('=' .repeat(60));

// Test user authentication first
console.log('\n1Ô∏è‚É£ Testing User Authentication...');
let { data: authData, error: authError } = await supabase.auth.signInWithPassword({
  email: 'admin@pottur.com',
  password: 'admin123'
});

let signUpData = null;
if (authError) {
  console.log('‚ùå Auth failed:', authError.message);
  console.log('Creating test user...');
  
  const { data: newSignUpData, error: signUpError } = await supabase.auth.signUp({
    email: 'admin@pottur.com',
    password: 'admin123'
  });
  
  if (signUpError) {
    console.log('‚ùå Sign up failed:', signUpError.message);
    process.exit(1);
  }
  
  signUpData = newSignUpData;
  console.log('‚úÖ Test user created successfully');
} else {
  console.log('‚úÖ Authentication successful');
}

const userId = authData?.user?.id || signUpData?.user?.id;
if (!userId) {
  console.log('‚ùå No user ID available');
  process.exit(1);
}

console.log('üë§ User ID:', userId);

// Test 1: News Posts
console.log('\n2Ô∏è‚É£ Testing News Posts...');
const newsData = {
  title: 'Test News Article',
  content: 'This is a test news article content.',
  excerpt: 'Test excerpt for the news article',
  author_id: userId,
  is_published: true,
  published_at: new Date().toISOString(),
  slug: 'test-news-article'
};

const { data: newsResult, error: newsError } = await supabase
  .from('news_posts')
  .insert(newsData)
  .select();

if (newsError) {
  console.log('‚ùå News insert failed:', newsError.message);
} else {
  console.log('‚úÖ News article created successfully');
  console.log('üì∞ Article ID:', newsResult[0]?.id);
}

// Test 2: Events
console.log('\n3Ô∏è‚É£ Testing Events...');
const eventData = {
  title: 'Test School Event',
  description: 'This is a test school event description.',
  event_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now
  location: 'School Auditorium',
  is_published: true
};

const { data: eventResult, error: eventError } = await supabase
  .from('events')
  .insert(eventData)
  .select();

if (eventError) {
  console.log('‚ùå Event insert failed:', eventError.message);
} else {
  console.log('‚úÖ Event created successfully');
  console.log('üìÖ Event ID:', eventResult[0]?.id);
}

// Test 3: Gallery Photos
console.log('\n4Ô∏è‚É£ Testing Gallery Photos...');
const galleryData = {
  image_url: 'https://picsum.photos/800/600?random=1',
  title: 'Test Gallery Photo',
  description: 'This is a test gallery photo description.',
  category: 'test'
};

const { data: galleryResult, error: galleryError } = await supabase
  .from('gallery_photos')
  .insert(galleryData)
  .select();

if (galleryError) {
  console.log('‚ùå Gallery insert failed:', galleryError.message);
} else {
  console.log('‚úÖ Gallery photo created successfully');
  console.log('üñºÔ∏è Photo ID:', galleryResult[0]?.id);
}

// Test 4: Verify data retrieval
console.log('\n5Ô∏è‚É£ Testing Data Retrieval...');

// Check news posts
const { data: allNews, error: newsRetrieveError } = await supabase
  .from('news_posts')
  .select('*')
  .limit(5);

if (newsRetrieveError) {
  console.log('‚ùå News retrieval failed:', newsRetrieveError.message);
} else {
  console.log(`‚úÖ Retrieved ${allNews?.length || 0} news articles`);
}

// Check events
const { data: allEvents, error: eventsRetrieveError } = await supabase
  .from('events')
  .select('*')
  .limit(5);

if (eventsRetrieveError) {
  console.log('‚ùå Events retrieval failed:', eventsRetrieveError.message);
} else {
  console.log(`‚úÖ Retrieved ${allEvents?.length || 0} events`);
}

// Check gallery
const { data: allPhotos, error: galleryRetrieveError } = await supabase
  .from('gallery_photos')
  .select('*')
  .limit(5);

if (galleryRetrieveError) {
  console.log('‚ùå Gallery retrieval failed:', galleryRetrieveError.message);
} else {
  console.log(`‚úÖ Retrieved ${allPhotos?.length || 0} gallery photos`);
}

// Summary
console.log('\n' + '=' .repeat(60));
console.log('üìä WORKFLOW TEST SUMMARY:');
console.log('=' .repeat(60));
console.log(`üë§ Authentication: ${authError ? '‚ùå FAILED' : '‚úÖ PASSED'}`);
console.log(`üì∞ News Posts: ${newsError ? '‚ùå FAILED' : '‚úÖ PASSED'}`);
console.log(`üìÖ Events: ${eventError ? '‚ùå FAILED' : '‚úÖ PASSED'}`);
console.log(`üñºÔ∏è Gallery: ${galleryError ? '‚ùå FAILED' : '‚úÖ PASSED'}`);
console.log(`üìñ Data Retrieval: ${(newsRetrieveError || eventsRetrieveError || galleryRetrieveError) ? '‚ùå FAILED' : '‚úÖ PASSED'}`);

const allTestsPassed = !authError && !newsError && !eventError && !galleryError && !newsRetrieveError && !eventsRetrieveError && !galleryRetrieveError;
console.log(`\nüéØ Overall Status: ${allTestsPassed ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`);

if (allTestsPassed) {
  console.log('\nüéâ All features are working correctly!');
  console.log('‚ú® Users can now:');
  console.log('   ‚Ä¢ Create and save news articles');
  console.log('   ‚Ä¢ Create and save events');
  console.log('   ‚Ä¢ Upload and save gallery photos');
} else {
  console.log('\n‚ö†Ô∏è Some issues still need to be addressed.');
}

// Clean up test data
console.log('\nüßπ Cleaning up test data...');
if (newsResult?.[0]?.id) {
  await supabase.from('news_posts').delete().eq('id', newsResult[0].id);
}
if (eventResult?.[0]?.id) {
  await supabase.from('events').delete().eq('id', eventResult[0].id);
}
if (galleryResult?.[0]?.id) {
  await supabase.from('gallery_photos').delete().eq('id', galleryResult[0].id);
}
console.log('‚úÖ Test data cleaned up');